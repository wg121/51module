C51 COMPILER V9.60.0.0   IR                                                                11/20/2023 18:20:34 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE IR
OBJECT MODULE PLACED IN .\Objects\IR.obj
COMPILER INVOKED BY: D:\MDK\C51\BIN\C51.EXE IR.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\IR.lst) TA
                    -BS(2) OBJECT(.\Objects\IR.obj)

line level    source

   1          #include "IR.h"
   2          #include "int0.h"
   3          #include "timer.h"
   4          
   5          //变量
   6          unsigned int IR_Time; //定时的时间
   7          unsigned char IR_State; //状态，利用状态机。0没有信号，1开始信号和重复信号，2数据信号
   8          
   9          unsigned char IR_Data[4]; //保存红外传来的数据。0：地址，1地址的取反，2命令，3命令取反
  10          unsigned char IR_pData;   //指向当前数据的位置
  11          
  12          //最终输出的变量
  13          unsigned char IR_DataFlag;    //数据是否收到。1数据收到了，0数据没收到
  14          unsigned char IR_RepeatFlag;  //是否重发
  15          unsigned char IR_Address;     //数据的地址
  16          unsigned char IR_Command;     //命令传回来的数值
  17          
  18          
  19          void IR_Init()
  20          {
  21   1        EXIT_Init();  //外部中断初始化
  22   1        timer0_init();  //定时器0初始化
  23   1      }
  24          
  25          unsigned char IR_GetDataFlag(void){
  26   1        if(IR_DataFlag) {
  27   2          IR_DataFlag = 0;
  28   2          return 1;
  29   2        }
  30   1        return 0;
  31   1      }
  32          
  33          unsigned char IR_GetRepeatFlag(void){
  34   1        if(IR_RepeatFlag) {
  35   2          IR_RepeatFlag = 0;
  36   2          return 1;
  37   2        }
  38   1        return 0;
  39   1      }
  40          
  41          unsigned char IR_GetAddress(){
  42   1        return IR_Address;
  43   1      }
  44          
  45          unsigned char IR_GetCommand(){
  46   1        return IR_Command;
  47   1      }
  48          
  49          //外部中断0的中断处理函数
  50          void EXIT0_Routine(void) interrupt 0
  51          {
  52   1        if(0 == IR_State){      //传来信号，开始启动
  53   2          Timer0_SetCount(0);   //设置计数
  54   2          Timer0_Run(1);        //开始计数
C51 COMPILER V9.60.0.0   IR                                                                11/20/2023 18:20:34 PAGE 2   

  55   2          IR_State = 1;         //状态1，开始信号传来
  56   2          
  57   2        }
  58   1        else if(1 == IR_State){ 
  59   2          IR_Time = Timer0_GetCount();  //获取一次下降沿的时间，开始分析传来的数据的长度
  60   2          Timer0_SetCount(0);   //重新设置计数的开始次数
  61   2      
  62   2      //晶振12M，11.0592M的不对
  63   2          if(IR_Time > (13500 - 800) && IR_Time < (13500 + 800)){ //开始信号传来
  64   3            IR_State = 2;         //状态2，数据信号即将传来
  65   3          }
  66   2          else if(IR_Time > (11250 - 500) && IR_Time < (11250 + 500)){  //repeat信号
  67   3            IR_RepeatFlag = 1;    //设置重发标志位为1
  68   3            Timer0_Run(0);        //结束计数
  69   3            IR_State = 0;         //状态0，以一帧为单位
  70   3          }
  71   2          else{ //信号不对
  72   3            IR_State = 1;         //信号不对的话吗，转为本状态
  73   3          }
  74   2        }
  75   1        else if(2 == IR_State){
  76   2          
  77   2          IR_Time = Timer0_GetCount();  //获取一次下降沿的时间，开始分析传来的数据的长度
  78   2          Timer0_SetCount(0);   //重新设置计数的开始次数
  79   2          
  80   2          if(IR_Time > (1120 - 500) && IR_Time < (1120 + 500)){ //数据“0”信号传来
  81   3            IR_Data[IR_pData/8] &= ~(0x01 << (IR_pData%8));
  82   3            IR_pData++;
  83   3          }
  84   2          else if(IR_Time > (2250 - 500) && IR_Time < (2250 + 500)){  //数据“1”信号传来
  85   3            IR_Data[IR_pData/8] |= (0x01 << (IR_pData%8));
  86   3            IR_pData++;
  87   3          }
  88   2          else{   //接收到错误的数据信号
  89   3            IR_pData = 0;
  90   3            IR_State = 1;
  91   3          }
  92   2          
  93   2          if(IR_pData >= 32){ //接受完了数据
  94   3            IR_pData = 0;     //指针置0，指向数据的初始位置
  95   3            if((IR_Data[0] == ~IR_Data[1]) && (IR_Data[2] == ~IR_Data[3])){ //数据验证，如果正确，就将数据转存
  96   4                IR_Address = IR_Data[0];      //地址转存
  97   4                IR_Command = IR_Data[2];      //数值转存
  98   4                IR_DataFlag = 1;        //接收到数据了
  99   4            }
 100   3            IR_State = 0;   //回到0状态
 101   3            Timer0_Run(0);  //定时器停止
 102   3          }
 103   2        }
 104   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    380    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     12    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
