C51 COMPILER V9.60.0.0   MAIN                                                              11/19/2023 12:05:49 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: D:\MDK\C51\BIN\C51.EXE main.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\main.lst
                    -) TABS(2) OBJECT(.\Objects\main.obj)

line level    source

   1          #include <REGX52.H>
   2          //#include <stdlib.h>
   3          #include "uart.h"
   4          
   5          //全局变量
   6          unsigned char uart_send_data = 0x00;    //发送数据的变量
   7          unsigned char uart_recv_data = 0x00;    //接收数据的变量
   8          
   9          ////////////////////////////////////////////////
  10          /*       下面的都是随便写的      */
  11          //接收缓存区的大小
  12          //const unsigned char RECV_LEN = 16;
  13          
  14          ////接收缓存区指针
  15          //unsigned char *uart_recv_buf = NULL;
  16          
  17          ////接收缓存区的申请
  18          //unsigned char *recv_buf_init(const unsigned char len)
  19          //{
  20          //  if(len < 0 || len > 128){   //缓存区太大，超过了51的内存区域
  21          //    return NULL;
  22          //  }
  23          //  
  24          //  uart_recv_buf = (unsigned char *)malloc(sizeof(unsigned char) * len);
  25          //  
  26          //  //申请内存失败
  27          //  if(NULL == uart_recv_buf) {
  28          //    return NULL;
  29          //  }
  30          //  
  31          //  //返回申请成功的内存的起始地址的指针
  32          //  return uart_recv_buf;
  33          //}
  34          //////////////////////////////////////////////////////
  35          
  36          //延时xms毫秒
  37          void delay_xms(unsigned int xms)    //@11.0592MHz
  38          {
  39   1        unsigned char i, j;
  40   1      
  41   1        while(xms--){
  42   2          i = 2;
  43   2          j = 199;
  44   2          do
  45   2          {
  46   3            while (--j);
  47   3          } while (--i);
  48   2        } 
  49   1      }
  50          
  51          
  52          //51的串口初始化 -- 波特率设置，在T1定时器里面
  53          //void uart_init_(){    //4800bps@11.0592MHz
  54          //  PCON |= 0x80;     //使能波特率倍速位SMOD
C51 COMPILER V9.60.0.0   MAIN                                                              11/19/2023 12:05:49 PAGE 2   

  55          //  SCON = 0x50;      //8位数据,可变波特率
  56          //  TMOD &= 0x0F;     //清除定时器1模式位
  57          //  TMOD |= 0x20;     //设定定时器1为8位自动重装方式
  58          //  TL1 = 0xD0;       //设定定时初值
  59          //  TH1 = 0xFF;       //设定定时器重装值
  60          //  ET1 = 0;          //禁止定时器1中断
  61          //  TR1 = 1;          //启动定时器1
  62          
  63          ////中断 -- 使能
  64          //  ES = 1;   //开始中断
  65          //  EA = 1;   //开始总中断
  66          //  PS = 1;   //设置优先级为高优先级
  67          //}
  68          
  69          //通过51的uart发送字节
  70          //void uart_send_byte_(const unsigned char byte){
  71          //  SBUF = byte;
  72          //  while(0 == T1);
  73          //  T1 = 0;
  74          //}
  75          
  76          /* 主函数 */
  77          void main(){
  78   1        uart_init();
  79   1        while(1){
  80   2          /* 每隔1秒，发送一个unsigned char 的数据 */
  81   2          //delay_xms(500);
  82   2          uart_send_byte(uart_send_data++);
  83   2        }
  84   1      }
  85          
  86          void uart_rounter(void) interrupt 4
  87          {
  88   1        if(1 == RI){    //接收中断 -- 接收到数据
  89   2          uart_recv_data = SBUF;
  90   2          uart_send_byte(uart_recv_data); //将接收到的数据，发送给上位机
  91   2          P2 = ~uart_recv_data;             //设置P2的LED灯，位发送的数据的样子
  92   2          RI = 0;       //接收中断，软件复位
  93   2        }
  94   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    107    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      2    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
